In the paper "Outrageous but Meaningful Coincidences", Conor McBride described a strongly-typed representation of a dependently typed language.
This project contains an adaptation of the technique to another dependently typed language, and an interpreter for raw syntax based on it.

See the blog post for an informal overview of what this interpreter's about:
http://homotopytypetheory.org/2014/08/19/a-formalized-interpreter/

Informal details of the language:

Abstract Syntax:
(x.M) denotes an expression appropriate for metavariable M, with a new bound variable in scope.
[] is the empty context. Nonempty contexts are written with sublist contexts or individual bindings separated by commas (,).

===============

variables (x)

types (T, A, B) ::= Uv | El t | Pi A (x.B)

terms (t, f, a) ::= x | apl f a

contexts (G) as lists of (x:T) bindings

===============

Typing Rules:

===============

Types (G |- T type):

------------ TpUv
G |- Uv type

G |- t : Uv
-------------- TpEl
G |- El t type

G |- A type
G, x:A |- B type
-------------------- TpPi
G |- Pi A (x.B) type

Terms (G |- t : T):

x:T in G
---------- TmVar
G |- x : T

G |- f : Pi A (x.B)
G |- a : A
--------------------- TmApl
G |- apl f a : B[a/x]

Contexts (|- G ctx):

--------- CNil
|- [] ctx

|- G ctx
G |- T type
------------- CCons
|- G, x:T ctx

===============

All these rules are in a type-checking-friendly style that I might've heard called "locally valid contexts".
One can derive judgements involving ill-formed contexts. (Like "x:El x |- Uv type".)
This is not a problem because a judgment should only be considered meaningful when the LHS of the turnstile is.
These derivations "inside the context" can be converted to derivations "outside the context" when the LHS can be separately derived.
(The interpreter does not do that though.)

Interpretation Behavior:
Conceptually, contexts are interpreted as left-nested sigmas (which are types).
	[[G]] : Type
Open type expressions are interpreted as type families (indexed by an interpreted context).
	[[T]] : [[G]]->Type
Open terms are interpreted as dependent functions.
	[[t]] : forall g:[[G]],[[T]] g
However, these interpretation functions are not expressed directly. Instead, the syntax and semantics are developed separately,
and then interpretation relations are defined. (TreeTypeItrp and TreeTermItrp in TreeItrp.v; CtxItrp instantiated from DepItrp.v)
The actual interpreter converts a syntactic typing derivation for a term or type expression
to a "semantic derivation" of the appropriate interpretation relation instance.
The type families and dependent functions for interpreted expressions can be projected out.
For example, the interpreter should interpret the derivation of

N:Uv, z:El N, s:Pi (El N) (_.El N) |- apl s z : El N

as

fun g:{g:{g:{_:unit & Type} & projT2 g} & (projT2 (projT1 g)->projT2 (projT1 g))} => (projT2 g) (projT2 (projT1 g))

which corresponds to

fun (N:Type) (z:N) (s:N->N) => s z

by the appropriate type isomorphism.

I elided the use of a universe construction ("Typ". See TreeItrp.v.) in the middle step.
But the universe allows the injection of arbitrary types, so there should still be an isomorphism.

Files:
Some of these require Coq 8.4 to compile; others compile in either 8.3 or 8.4.

Utils.v				(8.3) Various stuff that didn't belong elsewhere.
SimpSubst.v			(8.3) Limited de Bruijn index substitutions for SimpSyntax.v.

SimpSyntax.v		(8.3) Simple language. Types are limited to right-nested Pi, ending in Uv.
					The domains all implicitly use El immediately.
					Uses two contexts in typing rules. This is used by Chained.v and SemiSimplicial.v.

Substitutions.v		(8.3) Generic implementation of substitutions for de Bruijn indexes.
					"term" from TERMBUMP should be instantiated to whatever type of syntax gets substituted for variables.
					Use this to easily prove all the algebraic properties of substitutions for a language using de Bruijn indexes.
					(Because the messy variable cases are handled generically.)

DepTyping.v			(8.3) Generic implementation of typing contexts and the TmVar rule above.
					"type" from TYPES should be instantiated to whatever type of syntax is listed in a context.
					"tyDf" is a default value for list operations. It doesn't need to be well formed.
					Use this to easily prove the structural rules for a type system using de Bruijn indexes.
					Note that as is, this file assumes derivations "inside the context". (See above.)

TreeSyntax.v		(8.3) The language described above. Uses one context in typing rules.
					Uses Substitutions.v and DepTyping.v to handle structural stuff.

SimpToTree.v		(8.3) Type-preserving translation from the SimpSyntax.v language to the TreeSyntax.v one.

Context.v			(8.4) Implementation of semantic contexts (Ctx), strongly typed de Bruijn indexes (AtCtx),
					and substitutions for the semantics (e.g. elSubst).

DepItrp.v			(8.4) Generic implementation of substitutions (e.g. ttItrpSubst) and contexts (CtxItrp)
					for outrageous interpretation relations.
					Follows the pattern of Substitutions.v and DepTyping.v, but this time,
					since we're dealing with semantics, most of the work is done by Context.v.

TreeItrp.v			(8.4) Interpreter for the TreeSyntax.v language, as described above.

Chained.v			Generates well-typed syntax for the type of n-truncated towers. Not currently working.
SemiSimplicial.v	Generates well-typed syntax for the type of n-truncated semisimplicial types. Incomplete and broken.
